{
	"info": {
		"_postman_id": "09e61c9c-6e70-426a-935d-4657e2c9052e",
		"name": "Task API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24837675"
	},
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 201', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain id_user', () => {\r",
							"    var res = pm.response.json();\r",
							"    const {data} = res\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('id_user');\r",
							"    pm.expect(data.id_user).to.not.equals('');\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Define a character set from which to generate the random string\r",
							"var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
							"\r",
							"// Define the length of the random string\r",
							"var length = 5;\r",
							"\r",
							"// Initialize an empty string to store the random string\r",
							"var randomString = \"\";\r",
							"\r",
							"// Generate the random string\r",
							"for (var i = 0; i < length; i++) {\r",
							"    var randomIndex = Math.floor(Math.random() * charset.length);\r",
							"    randomString += charset.charAt(randomIndex);\r",
							"}\r",
							"\r",
							"// Set the random string as an environment variable for later use\r",
							"pm.environment.set(\"newName\", randomString);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{newName}}\",\r\n    \"password\": \"{{newPass}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User Error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 400', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain message missing duplicate', () => {\r",
							"    var res = pm.response.json();\r",
							"\r",
							"    pm.expect(res).to.haveOwnProperty('message');\r",
							"    pm.expect(res.message).to.equals('Missing required key or value: password');\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{newName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User Duplicate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 400', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain message Duplicate', () => {\r",
							"    var res = pm.response.json();\r",
							"\r",
							"    pm.expect(res).to.haveOwnProperty('message');\r",
							"    pm.expect(res.message).to.equals('user already registered in our database');\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{newName}}\",\r\n    \"password\": \"{{newPass}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(pm.response.code==200){\r",
							"    var res = pm.response.json();\r",
							"    pm.environment.set('token', res.data.token);\r",
							"}\r",
							"\r",
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain id_user', () => {\r",
							"    var res = pm.response.json();\r",
							"    const {data} = res\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('token');\r",
							"    pm.expect(data.token).to.not.equals('');\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{newName}}\",\r\n    \"password\": \"{{newPass}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login User Error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 400', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain message already login', () => {\r",
							"    var res = pm.response.json();\r",
							"\r",
							"    pm.expect(res).to.haveOwnProperty('message');\r",
							"    pm.expect(res.message).to.equals('you are already login');\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{newName}}\",\r\n    \"password\": \"{{wrongPass}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Task",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var tokens = pm.environment.get('token');\r",
							"pm.request.headers.add({\r",
							"  key: 'Authorization',\r",
							"  value: pm.environment.get('token')\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 201', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain id_user', () => {\r",
							"    var res = pm.response.json();\r",
							"    const {data} = res\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('id_task');\r",
							"    pm.expect(data.id_user).to.not.equals('');\r",
							"\r",
							"});\r",
							"\r",
							"if(pm.response.code==201){\r",
							"    var res = pm.response.json();\r",
							"    const {data} = res\r",
							"    pm.environment.set('taskId', data.id_task);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"Shopping List 1\",\r\n    \"description\":\"- Jeruk, - Sawi, - apel, - ayam\",\r\n    \"due_date\":\"2023-10-09\",\r\n    \"status\":\"not ready\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/task",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"task"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Task",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var tokens = pm.environment.get('token');\r",
							"pm.request.headers.add({\r",
							"  key: 'Authorization',\r",
							"  value: pm.environment.get('token')\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain id_user', () => {\r",
							"    var res = pm.response.json();\r",
							"    const {data} = res\r",
							"\r",
							"    pm.expect(data).to.be.an('array');\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/task",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"task"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Detail Task",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var tokens = pm.environment.get('token');\r",
							"pm.request.headers.add({\r",
							"  key: 'Authorization',\r",
							"  value: pm.environment.get('token')\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain id_user', () => {\r",
							"    var res = pm.response.json();\r",
							"    const {data} = res\r",
							"\r",
							"    pm.expect(data).to.be.an('array');\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/task/{{taskId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"task",
						"{{taskId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Detail Task",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var tokens = pm.environment.get('token');\r",
							"pm.request.headers.add({\r",
							"  key: 'Authorization',\r",
							"  value: pm.environment.get('token')\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var title2=pm.environment.get('title2')\r",
							"\r",
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain title', () => {\r",
							"    var res = pm.response.json();\r",
							"    const {data} = res\r",
							"\r",
							"    pm.expect(res).to.haveOwnProperty('type');\r",
							"    pm.expect(res.type).to.equals('success');\r",
							"    pm.expect(data).to.haveOwnProperty('title');\r",
							"    pm.expect(data.title).to.equals(title2);\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{title2}}\",\r\n    \"description\": \"- Jeruk, - Sawi, - apel, - ayam\",\r\n    \"status\": \"ready\",\r\n    \"due_date\": \"2023-10-13\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/task/{{taskId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"task",
						"{{taskId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Task",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var tokens = pm.environment.get('token');\r",
							"pm.request.headers.add({\r",
							"  key: 'Authorization',\r",
							"  value: pm.environment.get('token')\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain id_user', () => {\r",
							"    var res = pm.response.json();\r",
							"\r",
							"    pm.expect(res).to.haveOwnProperty('message');\r",
							"    pm.expect(res.message).to.equals('delete task success');\r",
							"\r",
							"});\r",
							"if(pm.response.code==200){\r",
							"    pm.environment.unset('taskId');\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/task/{{taskId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"task",
						"{{taskId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// var tokens = pm.environment.get('token');\r",
							"pm.request.headers.add({\r",
							"  key: 'Authorization',\r",
							"  value: pm.environment.get('token')\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain message succes', () => {\r",
							"    var res = pm.response.json();\r",
							"    const {data} = res\r",
							"\r",
							"    pm.expect(res).to.haveOwnProperty('message');\r",
							"    pm.expect(res.message).to.equals('logout success');\r",
							"});\r",
							"\r",
							"if(pm.response.code==200){\r",
							"    pm.environment.unset('token');\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/logout",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"logout"
					]
				}
			},
			"response": []
		}
	]
}